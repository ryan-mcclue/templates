#!/bin/bash

set -e

# : command that takes no arguments, always return 0, i.e. true

# lines=()
# read_entire_file "text-rand.txt" "lines"
# printf "%s\n" "${lines[@]}"
read_entire_file()
{
  local file_name="$1"
  local result_var="$2"

  local __read_entire_file_lines=()

  while IFS=$'\r\n' read -r line; do
    __read_entire_file_lines+=("$line")
  done < "$file_name"

  command eval "$result_var"'=(${__read_entire_file_lines[@]})' 
}

os="undefined"
if [[ "$OSTYPE" == "linux-gnu" ]]; then
  os="linux"
fi

set -u
# IMPORTANT(Ryan): This file is ignored by source control to allow tweaking of build without affecting history
source "implicit-build-params"
declare -A build_params
build_params[compiler]=$compiler 
build_params[mode]=$mode 
build_params[arch]=$arch
if [[ $verbose -eq 1 ]]; then
  verbose_echo="echo"
else
  verbose_echo=":"
fi
set +u

mkdir -p build

compiler_flags=()
linker_flags=()

# TODO(Ryan): embedded look at 
# -fstack-usage  generates .su files
# -Wstack-usage=255 (warn if usage over 255 bytes)
# Puncover will even analyze the stack space information emitted and generate maximal stack depth estimations based on call path.

#pragma mark - Group

if [[ "$compiler" == "g++" && "$os" == "linux" ]]; then

  # TODO(Ryan): For embedded, run arm-none-eabi-size to inspect output file

  # IMPORTANT(Ryan): New errors aren't added to -Wall and -Wextra, as this would break old things

  # nice warnings about implicit type conversions/promotions etc. aren't at forefront from spec
  # also about conversion alignment changes, declarations shadowing, casting, signedness, 
  # no trampolines (nested functions...)
  flags+=( "-Wall" "-Wextra" "-Wshadow" "-Wconversion" "-Wdouble-promotion" "-Wformat=2" "-pedantic" )
  flags+=( "-Wundef" "-Wshadow" "-Wcast-align" "-Wcast-qual" "-Wpadded" "-fno-common" "-march=native" )
  flags+=( "-Wfloat-equal" "-Wlogical-op" "-Wredundant-decls" "-Wstrict-overflow=2" "-Warray-bounds=2" )
  flags+=( "-Wwrite-strings" "-Wpointer-arith" "-Wformat-truncation" "-Wmissing-include-dirs" )
  flags+=( "-Wcast-align" "-Wswitch-enum" "-Wsign-conversion" "-Wdisabled-optimization" )
  flags+=( "-Winline" "-Wmissing-declarations" "-Wdouble-promotion" "-Wshadow" "-Wtrampolines" )
  flags+=( "-Wvector-operation-performance" "-Wnull-dereference" )
  flags+=( "-Wduplicated-cond" "-Wshift-overflow=2" "-Wcast-align=strict" )
  flags+=( "-Wstrict-null-sentinel" "-Wuseless-cast" "-Wzero-as-null-pointer-constant" )

  # gives us the specific warning flag
  flags+=( "-fdiagnostics-show-option" "-fcolor-diagnostics" )

  flags+=( "-Wno-unused-function" "-Wno-unknown-pragmas" "-Wno-missing-field-initializers" )

  # c++ specific
  flags+=( "-std=c++2a" "-fno-exceptions" "-fno-rtti" "-Wctor-dtor-privacy")

  flags+=( "-Icode" )

# IMPORTANT(Ryan): Only enable "-Werror" for CI builds, as different toolchains give warnings for different things
# such differences exacerbated with toolchain updates
# clang -Weverything will be affected by toolchain updates adding new warnings

  if [[ "$mode" == "debug" ]]; then
    flags+=( "-DMAIN_DEBUG" )

    # -g3 gives macro definitions
    flags+=( "-g3 -O0" )

    flags+=( "-Wno-unused-variable"  "-Wno-unused-but-set-variable" "-Wno-unused-parameter" "-Wno-unused-result" ) 

    flags+=( "-fsanitize=address,undefined" "-fno-sanitize=float-divide-by-zero,float-cast-overflow" "-fno-sanitize-recover=all" )

    # static analysis (requires gcc-10)
    flags+= ( "-fanalyzer" )

# get debug and optimisation flags $(readelf -w build/server | grep producer)

# pragma warning(disable: 4201) // nonstandard extension used: nameless struct/union

#	-@find $(BUILD) -name '*.gcda' -exec rm {} +
#	./$(EXECUTABLE)
#	@gcov -b -o $(BUILD)/src/ pugixml.cpp.gcda | sed -e '/./{H;$!d;}' -e 'x;/pugixml.cpp/!d;'
#	@find . -name '*.gcov' -and -not -name 'pugixml.cpp.gcov' -exec rm {} +
#	@sed -i -e "s/#####\(.*\)\(\/\/ unreachable.*\)/    1\1\2/" pugixml.cpp.gcov


# --coverage (only for test builds)
  fi
  if [[ "$mode" == "release" ]]; then
-O3 -DNDEBUG
-ffunction-sections -fdata-sections # ELF only
-ffast-math
    linker_flags+=( "-Wl,--gc-sections" )

	'-fdevirtualize', # Attempt to convert calls to virtual functions to direct calls

# -Os for embedded
  fi

  ctime -begin misc/desktop.ctm

  verbose_echo g++ ${compiler_flags[@]} main.c -o main ${linker_flags[@]}
  g++ ${compiler_flags[@]} main.c -o main ${linker_flags[@]}

  ctime -end misc/desktop.ctm

fi

# use bash as build script as is effectively OS agnostic 
# (if you have git on windows, you have bash)
