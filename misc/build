#!/bin/bash

set -e

# IMPORTANT(Ryan): Every day start by running print_stats script that will display gnu plot graphs

# start_time=$(date +%s.%N)
# runtime=$( echo "$end_time - $start_time)" | bc -l )
ctime -begin private/main.ctm

# find . -name "*" -delete > /dev/null

# cflow --number --omit-symbol-names --omit-arguments code/app.c  
# use stack to print out longest indentation
# push(indentations, 0)
# active_indentation = 0
# for line in file:
#   line_indentation = len(line) - len(line.lstrip())
#   if line_indentation > active_indentation:
#     push(indentations, 
#   else:

# print out installed system RAM to obtain percentage of used heap: $(free | awk 'FNR == 2 {print $2}')

print_longest_function() {
  # IMPORTANT(Ryan): Must run with universal ctags
  # also run after preprocessing
  ctags --c-kinds=f --fields=+ne -o - code/linux-main.cpp.i > misc/ctags-info.txt
  local max_function_name
  local max_function_loc
  while read -r line; do
    function_name="${line%% *}"
    line_start_pre="${line%%*line:}"
    line_num="${line_start_pre## *}"
    line_end_pre="${line%%*end:}"
    line_end="${line_end_pre## *}"
    length=$(( line_end - line_start ))
    if [[ $length -ge max_length ]]; then
      max_length=$length
      max_function_name="$function_name"
    fi
  done < misc/ctags-info.txt
}

push_dir() {
  command pushd "$@" > /dev/null
}

pop_dir() {
  command popd "$@" > /dev/null
}


if [[ "$OSTYPE" == "linux-gnu" ]]; then
  os="linux"
else
  printf "Error: Build currently only supports linux\n" >&2
  exit 1
fi

set -u
# NOTE(Ryan): This file is ignored by source control to allow tweaking of build params without affecting history
source "private/build-params"
param_compiler=$compiler 
param_mode=$mode 
param_arch=$arch
param_verbose=$verbose
set +u

mkdir -p build run

compiler_flags=()
linker_flags=()

# TODO(Ryan): EMBEDDED 
#   -fstack-usage  generates .su files
#   -Wstack-usage=255 (warn if usage over 255 bytes)
#   Puncover will even analyze the stack space information emitted and generate maximal stack depth estimations based on call path.
#
#   run arm-none-eabi-size to inspect output file
#   -Os instead of -O3 optimisation 

# TODO(Ryan): General build flow:
# 1. datagen (codegen could be to parse file data into structs?)
# 2. library
# 3. main

# If wanting to build assets, would say have the relevent 'project' files, e.g. .blend files
# Then create output files, e.g. .obj files by running say blender $blendFile --background --python ExportBlenderAssets.py
# Then appropriate directory copy: rsync -a --stats *.obj ../Collision
# Probably also introduce a clean.sh script as well

# TODO(Ryan): tracy runtime profiler: 
# https://github.com/makuto/spargus-vehicle-prototype/tree/master/Profiling

# TODO(Ryan): renderdoc gpu profiler: 

# -Wl,--print-memory-usage
# 
# void *pFnBottom = (void *)MyFunc;
# void *pFnTop;
# unsigned int uiStackUsage;
# 
# void MyFunc( void )
# {
#   __asm__ ( mov pFnTop, esp );
#   uiStackUsage = (unsigned int)(pFnTop - pFnBottom);
# }
# 
# -finstrument-functions (we get pointer to function)
# 
# ctags -x --c-kinds=f filename.c
# awk 'NR > first && /^}$/ { print NR; exit }' first=$FIRST_LINE filename.c

# must have universal ctags (maintained version of exuberant ctags)
# ctags --fields=+ne -o - --sort=no foo.c

# note that function braces in first column
# INTERNAL\n.*\n{\n

if [[ "$param_arch" == "x86_64" && "$param_compiler" == "g++" && "$os" == "linux" ]]; then

  # IMPORTANT(Ryan): Unfortunately new errors aren't added to -Wall and -Wextra for backwards compatibility

  # IMPORTANT(Ryan): Only enable "-Werror" for CI builds, as different toolchains give warnings for different things
  # such differences exacerbated with toolchain updates
  # clang -Weverything will be affected by toolchain updates adding new warnings

  # NOTE(Ryan): Enable various warnings largely related to implicit signed, alignment, casting, promotion issues
  compiler_flags+=( "-Wall" "-Wextra" "-Wshadow" "-Wconversion" "-Wdouble-promotion" "-Wformat=2" "-pedantic" )
  compiler_flags+=( "-Wundef" "-Wshadow" "-Wcast-align" "-Wpadded" "-fno-common" "-march=native" )
  compiler_flags+=( "-Wfloat-equal" "-Wlogical-op" "-Wredundant-decls" "-Wstrict-overflow=2" "-Warray-bounds=2" )
  compiler_flags+=( "-Wwrite-strings" "-Wpointer-arith" "-Wformat-truncation" "-Wmissing-include-dirs" )
  compiler_flags+=( "-Wcast-align" "-Wswitch-enum" "-Wsign-conversion" "-Wdisabled-optimization" )
  compiler_flags+=( "-Winline" "-Wmissing-declarations" "-Wdouble-promotion" "-Wshadow" "-Wtrampolines" )
  compiler_flags+=( "-Wvector-operation-performance" "-Wnull-dereference" )
  compiler_flags+=( "-Wduplicated-cond" "-Wshift-overflow=2" "-Wcast-align=strict" )
  compiler_flags+=( "-Wstrict-null-sentinel" "-Wuseless-cast" "-Wzero-as-null-pointer-constant" )

  compiler_flags+=( "-Winvalid-pch" )

  # NOTE(Ryan): Display the specific warning flag so we can ignore it if needed
  compiler_flags+=( "-fdiagnostics-show-option" )

  # NOTE(Ryan): Ignored warnings
  compiler_flags+=( "-Wno-unknown-pragmas" "-Wno-missing-field-initializers" )

  # NOTE(Ryan): C++ specific
  compiler_flags+=( "-std=c++2a" "-fno-exceptions" "-fno-rtti" "-Wctor-dtor-privacy")

  compiler_flags+=( "-I code" "-isystem external")

  # -Wl,-Map=build/main.map 

  if [[ "$param_mode" == "debug" ]]; then
    compiler_flags+=( "-DMAIN_DEBUG" )

    # NOTE(Ryan): -g3 gives macro definitions
    compiler_flags+=( "-g3 -O0" )

    compiler_flags+=("-Wno-unused-function" "-Wno-unused-variable"  "-Wno-unused-but-set-variable" "-Wno-unused-parameter" "-Wno-unused-result" ) 

    compiler_flags+=( "-fsanitize=address,undefined" "-fno-sanitize=float-divide-by-zero,float-cast-overflow" "-fno-sanitize-recover=all" )

    # NOTE(Ryan): The \x part specifies any ascii character
    # rg --no-line-number --only-matching "\[\-W[\x00-\x7F]+\]" warnings.txt | sort | uniq
    # ignored_stb_sprintf_pch_compiler_flags=( "-Wno-cast-align" "-Wno-conversion" "-Wno-padded" "-Wno-sign-conversion" "-Wno-useless-cast" "-Wno-zero-as-null-pointer-constant" )
    # g++ ${compiler_flags[*]} ${ignored_stb_sprintf_pch_compiler_flags[*]} -DSTB_SPRINTF_IMPLEMENTATION=1 ../learn/stb_sprintf.h -o external/stb_sprintf.h.gch ${linker_flags[*]}

    # IMPORTANT(Ryan): static analysis requires gcc-10
    # IMPORTANT(Ryan): significantly increases compilation time
    # compiler_flags+=( "-fanalyzer" )

    # get debug and optimisation flags $(readelf -w build/server | grep producer)
    
    # pragma warning(disable: 4201) // nonstandard extension used: nameless struct/union
    
    # compiler_flags+=( "--coverage" ) (only for test builds)
    #	-@find $(BUILD) -name '*.gcda' -exec rm {} +
    #	./$(EXECUTABLE)
    #	@gcov -b -o $(BUILD)/src/ pugixml.cpp.gcda | sed -e '/./{H;$!d;}' -e 'x;/pugixml.cpp/!d;'
    #	@find . -name '*.gcov' -and -not -name 'pugixml.cpp.gcov' -exec rm {} +
    #	@sed -i -e "s/#####\(.*\)\(\/\/ unreachable.*\)/    1\1\2/" pugixml.cpp.gcov
    
  elif [[ "$param_mode" == "release" ]]; then
    compiler_flags+=( "-DMAIN_RELEASE" )
    compiler_flags+=( "-O3" )
    compiler_flags+=( "-ffunction-sections" "-fdata-sections" ) 

    # IMPORTANT: should not be used for embedded as it may inline pieces of code and place
    # them in the same memory region.
    # also may increase stack usage
    compiler_flags+=( "-flto" )

    compiler_flags+=( "-ffast-math" )

    # pointer analysis; large compile times
    compiler_flags+=( "-fipa-pta" )
    
    # NOTE(Ryan): C++ specific attempt to convert calls to virtual functions to direct calls
    compiler_flags+=( "-fdevirtualize-at-ltrans" )

    linker_flags+=( "-Wl,--gc-sections" )
  else
    printf "Error: Build currently only supports debug and release modes\n" >&2
    exit 1
  fi

  if [[ "$param_verbose" == "1" ]]; then
    echo g++ ${compiler_flags[*]} code/linux-main.cpp -o build/linux-main ${linker_flags[*]}
  fi

  # g++ ${compiler_flags[*]} -E -P code/linux-main.cpp -o build/linux-main.i ${linker_flags[*]}
  # wc -l build/linux-main.i
  # LOC, largest function lines, section/binary sizes
  # max heap usage, max stack usage, execution time

  g++ ${compiler_flags[*]} -E -P code/linux-main.i -o build/linux-main ${linker_flags[*]}

  pushd run >/dev/null

  ../build/linux-main

  popd >/dev/null

else
  printf "Error: Build currently only supports x86_64 g++ on linux\n" >&2
  exit 1
fi

ctime -end private/main.ctm
