#!/bin/bash

set -e

# set -u or set -o nounset
# set +u

# : command that takes no arguments, always return 0, i.e. true

# TODO(Ryan): Just use [[ ]]; in ifs

# TODO(Ryan): Perhaps introduce a diagnostic flag for c program builds as well

# lines=()
# read_entire_file "text-rand.txt" "lines"
# printf "%s\n" "${lines[@]}"
read_entire_file()
{
  local file_name="$1"
  local result_var="$2"

  local __read_entire_file_lines=()

  while IFS=$'\r\n' read -r line; do
    __read_entire_file_lines+=("$line")
  done < "$file_name"

  command eval "$result_var"'=(${__read_entire_file_lines[@]})' 
}

os="undefined"
if [[ "$OSTYPE" == "linux-gnu" ]]; then
  os="linux"
fi

set -u
source "git-ignored/build-params"
declare -A build_params
build_params[compiler]=$compiler 
build_params[mode]=$mode 
build_params[linker]=$linker 
build_params[arch]=$arch
set +u

flags=()

if [[ "$compiler" == "gcc" ]]; then
  if [[ "$mode" == "debug" ]]; then
    flags+=( "-DMAIN_DEBUG" )
  fi
  if [[ "$mode" == "release" ]]; then

  fi

  gcc main.c -c main.o  
fi
if [[ "$linker" == "lld" ]]; then
  if [[ "$mode" == "debug" ]]; then

  fi
  if [[ "$mode" == "release" ]]; then

  fi

  lld main.o -o 
fi

# use bash as build script as is effectively OS agnostic 
# (if you have git on windows, you have bash)

# 2. IMPLICIT (things that are different to different users of the codebase)
# TODO(Ryan): Perhaps just set bash flag to error out on variables being undefined?
# put build params here to prevent many users having to include
# main_compiler="gcc"; compile_mode="debug"; linker="ldd"; arch="x64"
# lib_compiler="gcc"; lib_output="library"
