#!/bin/bash

set -e

# set -u or set -o nounset
# set +u

# : command that takes no arguments, always return 0, i.e. true

# TODO(Ryan): Just use [[ ]]; in ifs

# TODO(Ryan): Perhaps introduce a diagnostic flag for c program builds as well

# lines=()
# read_entire_file "text-rand.txt" "lines"
# printf "%s\n" "${lines[@]}"
read_entire_file()
{
  local file_name="$1"
  local result_var="$2"

  local __read_entire_file_lines=()

  while IFS=$'\r\n' read -r line; do
    __read_entire_file_lines+=("$line")
  done < "$file_name"

  command eval "$result_var"'=(${__read_entire_file_lines[@]})' 
}

os="undefined"
if [[ "$OSTYPE" == "linux-gnu" ]]; then
  os="linux"
fi

set -u
source "ignored/build-params"
declare -A build_params
build_params[compiler]=$compiler 
build_params[mode]=$mode 
build_params[linker]=$linker 
build_params[arch]=$arch
set +u

compiler_flags=()
linker_flags=()

# TODO(Ryan): embedded look at 
# -fstack-usage  generates .su files
# -Wstack-usage=255 (warn if usage over 255 bytes)
# Puncover will even analyze the stack space information emitted and generate maximal stack depth estimations based on call path.



  -Warray-bounds=2 


# TODO(Ryan): Put ctime here 

# TODO(Ryan): memfault Usefulness of linker map files (analyse program size?)
dev_compiler_flags="-O0 -g -ggdb3 -DHHF_SLOW -DHHF_INTERNAL"

#pragma mark - Group

if [[ "$compiler" == "g++" ]]; then

  # TODO(Ryan): For embedded, run arm-none-eabi-size to inspect output file

  # IMPORTANT(Ryan): New errors aren't added to -Wall and -Wextra, as this would break old things

  # nice warnings about implicit type conversions/promotions etc. aren't at forefront from spec
  flags+=( "-fno-exceptions" "-fno-rtti" )
  flags+=( "-Wall" "-Wextra" "-Wshadow" "-Wconversion" "-Wdouble-promotion" "-Wformat=2" "-pedantic" )
-std=c++2a
  -march=native
-Wundef
-fno-common
-Wpadded

	'-Wold-style-cast',
	'-Wnon-virtual-dtor',
	'-Wctor-dtor-privacy',
	'-Woverloaded-virtual',
	'-Wnoexcept',
	'-Wstrict-null-sentinel',
	'-Wuseless-cast',
	'-Wzero-as-null-pointer-constant',
	'-Wextra-semi',



# IMPORTANT(Ryan): Only enable "-Werror" for CI builds, as different toolchains give warnings for different things
# such differences exacerbated with toolchain updates
# clang -Weverything will be affected by toolchain updates adding new warnings

ignored_warnings='-Wno-unused-variable -Wno-unused-function -Wno-unused-but-set-variable
  -Wno-unused-parameter -Wno-missing-field-initializers -Wno-write-strings
  -Wno-unused-result'

  if [[ "$mode" == "debug" ]]; then
    flags+=( "-DMAIN_DEBUG" )
    # -g3 gives macro definitions
    flags+=( "-g3 -O0" )
 -Wundef -Wshadow -Wcast-align -Wcast-qual -Wold-style-cast -Wdouble-promotion

# pragma warning(disable: 4201) // nonstandard extension used: nameless struct/union

#	-@find $(BUILD) -name '*.gcda' -exec rm {} +
#	./$(EXECUTABLE)
#	@gcov -b -o $(BUILD)/src/ pugixml.cpp.gcda | sed -e '/./{H;$!d;}' -e 'x;/pugixml.cpp/!d;'
#	@find . -name '*.gcov' -and -not -name 'pugixml.cpp.gcov' -exec rm {} +
#	@sed -i -e "s/#####\(.*\)\(\/\/ unreachable.*\)/    1\1\2/" pugixml.cpp.gcov


--coverage (only for test builds)
-fanalyzer (static analysis)
-fsanitize=address,undefined -fno-sanitize=float-divide-by-zero,float-cast-overflow -fno-sanitize-recover=all
-fno-exceptions
  fi
  if [[ "$mode" == "release" ]]; then
-O3 -DNDEBUG
-ffunction-sections -fdata-sections # ELF only
-ffast-math

# -Os for embedded
  fi

  gcc main.c -c main.o  
fi
if [[ "$linker" == "lld" ]]; then
  if [[ "$mode" == "debug" ]]; then
-coverage
-fsanitize=address,undefined
  fi
  if [[ "$mode" == "release" ]]; then
-Wl,--gc-sections
  fi

  lld main.o -o 
fi

desired_common_compile_flags = [
	# Diagnostics
	'-fdiagnostics-show-option',
	'-fcolor-diagnostics',
	# Disabled Warnings
	'-Wno-unknown-pragmas', # Some compilers complain about our use of #pragma mark
	'-Wno-c++98-compat',
	'-Wno-c++98-compat-pedantic',
	'-Wno-padded',
	'-Wno-exit-time-destructors', # causes warnings if you use static values
	'-Wno-global-constructors', # causes warnings if you use static values
	'-Wno-covered-switch-default',
	# Desired Warnings
	'-Wfloat-equal',
	'-Wconversion',
	'-Wlogical-op',
	'-Wundef',
	'-Wredundant-decls',
	'-Wshadow',
	'-Wstrict-overflow=2',
	'-Wwrite-strings',
	'-Wpointer-arith',
	'-Wcast-qual',
	'-Wformat=2',
	'-Wformat-truncation',
	'-Wmissing-include-dirs',
	'-Wcast-align',
	'-Wswitch-enum',
	'-Wsign-conversion',
	'-Wdisabled-optimization',
	'-Winline',
	'-Winvalid-pch',
	'-Wmissing-declarations',
	'-Wdouble-promotion',
	'-Wshadow',
	'-Wtrampolines',
	'-Wvector-operation-performance',
	'-Wshift-overflow=2',
	'-Wnull-dereference',
	'-Wduplicated-cond',
	'-Wshift-overflow=2',
	'-Wnull-dereference',
	'-Wduplicated-cond',
	'-Wcast-align=strict',
	# Compiler Optimization Flags
	'-ffunction-sections', # Place each function in its own section (ELF Only)
	'-fdata-sections', # Place each data in its own section (ELF Only)
	'-fdevirtualize', # Attempt to convert calls to virtual functions to direct calls
]

desired_common_link_flags = [
	# Optimization Flags
	'-Wl,-dead_strip', # Strip dead symbols for OS X
	'-Wl,--gc-sections',
]



# use bash as build script as is effectively OS agnostic 
# (if you have git on windows, you have bash)

# 2. IMPLICIT (things that are different to different users of the codebase)
# TODO(Ryan): Perhaps just set bash flag to error out on variables being undefined?
# put build params here to prevent many users having to include
# main_compiler="gcc"; compile_mode="debug"; linker="ldd"; arch="x64"
# lib_compiler="gcc"; lib_output="library"
